# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys

class TestDefaultSuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.wait = 0.5
  
  def teardown_method(self, method):
    self.driver.quit()

  def login(self):
    self.driver.get("http://localhost:5000/")
    self.driver.set_window_size(1536, 824)
    self.driver.find_element(By.LINK_TEXT, "Login").click()
    self.driver.find_element(By.ID, "email").click()
    self.driver.find_element(By.ID, "email").send_keys("ubumlaas@gmail.com")
    self.driver.find_element(By.ID, "password").send_keys("thisIsATest1!")
    self.driver.find_element(By.ID, "password").send_keys(Keys.ENTER)

  def logout(self):
    self.driver.find_element(By.LINK_TEXT, "Logout").click()
    assert self.driver.find_element(By.LINK_TEXT, "Login").text == "Login"
  
  def test_1Register(self):
    self.driver.get("http://localhost:5000/")
    self.driver.set_window_size(1536, 824)
    self.driver.find_element(By.LINK_TEXT, "Register").click()
    self.driver.find_element(By.ID, "email").click()
    self.driver.find_element(By.ID, "email").send_keys("ubumlaas@gmail.com")
    self.driver.find_element(By.ID, "username").click()
    self.driver.find_element(By.ID, "username").send_keys("ubumlaas")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("thisIsATest1!")
    self.driver.find_element(By.ID, "confirm_password").click()
    self.driver.find_element(By.ID, "confirm_password").send_keys("thisIsATest1!")
    self.driver.find_element(By.ID, "submit").click()
    WebDriverWait(self.driver, 30000).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, ".alert")))
    assert self.driver.find_element(By.CSS_SELECTOR, ".alert").text == "User registered.\n×"
  
  def test_21LoginIncorrect(self):
    self.driver.get("http://localhost:5000/")
    self.driver.set_window_size(1536, 824)
    self.driver.find_element(By.LINK_TEXT, "Login").click()
    self.driver.find_element(By.ID, "email").click()
    self.driver.find_element(By.ID, "email").send_keys("ubumlaas@gmail.com")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("ThisIsNotMyPassword")
    self.driver.find_element(By.ID, "submit").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".alert").text == "Wrong username or password\n×"
  
  def test_22LoginAndLogoutCorrect(self):
    self.login()
    assert self.driver.find_element(By.LINK_TEXT, "Logged in as ubumlaas").text == "Logged in as ubumlaas"
    self.logout()
    
  def test_31DatasetLoad(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".jumbotron > .text-center").text == "Configure experiment"
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    assert self.driver.find_element(By.CSS_SELECTOR, "th:nth-child(3)").text == "Cl.thickness"
    self.driver.execute_script("$('#data').val('iris.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    assert self.driver.find_element(By.CSS_SELECTOR, ".font-weight-bold:nth-child(2)").text == "sepal length (cm)"
    self.driver.execute_script("$('#data').val('music.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    assert self.driver.find_element(By.CSS_SELECTOR, "th:nth-child(2)").text == "amazed-suprised"
    self.driver.execute_script("$('#data').val('weatherHistory.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    assert self.driver.find_element(By.CSS_SELECTOR, "th:nth-child(2)").text == "Temperature (C)"
    self.logout()  

  def test_321DatasetUseNormal(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.execute_script("$('#col0_use_label').click();")
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    WebDriverWait(self.driver, 30000).until(expected_conditions.visibility_of_element_located((By.ID, "0_opt")))
    element = self.driver.find_element(By.ID, "0_opt")
    assert "list-group-item-secondary" in element.get_attribute('class').split(" ")
    self.logout()
  
  def test_322DatasetUseReduced(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.find_element(By.ID, "data_feedback").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    self.driver.execute_script('$("#sel option[value=\'Id\']").prop("selected",true)')
    self.driver.execute_script('$("#nuse").click()')
    self.driver.find_element(By.ID, "normal_tab-tab").click()
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col0_use:checked")
    assert len(elements) == 0
    self.logout()  
  
  def test_331DatasetNotUseNormal(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    element = self.driver.find_element(By.ID, "0_opt")
    assert "list-group-item-primary" in element.get_attribute('class').split(" ")
    self.logout()
    
  def test_332DatasetNotUseReduced(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    self.driver.execute_script('$("#sel option[value=\'Id\']").prop("selected",true)')
    self.driver.execute_script('$("#nuse").click()')
    self.driver.execute_script('$("#sel option[value=\'Id\']").prop("selected",true)')
    self.driver.execute_script('$("#use").click()')
    self.driver.find_element(By.ID, "normal_tab-tab").click()
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col0_use:checked")
    assert len(elements) > 0
    self.logout()
  
  def test_341DatasetNoTargetNormal(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.execute_script("$('#col10_target_label').click();")
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_use:checked")
    assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_target:checked")
    assert len(elements) == 0
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    element = self.driver.find_element(By.ID, "10_opt")
    assert "list-group-item-secondary" in element.get_attribute('class').split(" ")
    self.logout()
    
  def test_342DatasetNoTargetReduced(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    self.driver.execute_script('$("#sel option[value=\'Class\']").prop("selected",true)')
    self.driver.execute_script('$("#nuse").click()')
    element = self.driver.find_element(By.ID, "10_opt")
    assert "list-group-item-secondary" in element.get_attribute('class').split(" ")
    self.driver.find_element(By.ID, "normal_tab-tab").click()
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_use:checked")
    assert len(elements) == 0
    self.logout()
    
  def test_351DatasetNoTargetUseNormal(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.execute_script("$('#col10_use_label').click();")
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_use:checked")
    assert len(elements) > 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_target:checked")
    assert len(elements) == 0
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    element = self.driver.find_element(By.ID, "10_opt")
    assert "list-group-item-primary" in element.get_attribute('class').split(" ")
    self.logout()
  
  def test_352DatasetNoTargetUseReduced(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    self.driver.execute_script('$("#sel option[value=\'Class\']").prop("selected",true)')
    self.driver.execute_script('$("#use").click()')
    element = self.driver.find_element(By.ID, "10_opt")
    assert "list-group-item-primary" in element.get_attribute('class').split(" ")
    self.driver.find_element(By.ID, "normal_tab-tab").click()
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_use:checked")
    assert len(elements) > 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_target:checked")
    assert len(elements) == 0
    self.logout()
    
  def test_361DatasetChangeTargetNormal(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.execute_script("$('#col9_target_label').click();")
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_use:checked")
    assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_target:checked")
    assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col9_use:checked")
    assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col9_target:checked")
    assert len(elements) > 0
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    element = self.driver.find_element(By.ID, "10_opt")
    assert "list-group-item-secondary" in element.get_attribute('class').split(" ")
    element = self.driver.find_element(By.ID, "9_opt")
    assert "list-group-item-success" in element.get_attribute('class').split(" ")
    self.logout()
    
  def test_362DatasetChangeTargetReduced(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.find_element(By.ID, "data").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    self.driver.execute_script("$('#sel option[value=\"Mitoses\"]').prop('selected',true);")
    self.driver.execute_script("$('#target').click();")
    element = self.driver.find_element(By.ID, "10_opt")
    assert "list-group-item-secondary" in element.get_attribute('class').split(" ")
    element = self.driver.find_element(By.ID, "9_opt")
    assert "list-group-item-success" in element.get_attribute('class').split(" ")
    self.driver.find_element(By.ID, "normal_tab-tab").click()
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_use:checked")
    assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col10_target:checked")
    assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col9_use:checked")
    assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col9_target:checked")
    assert len(elements) > 0
    self.logout()
    
  def test_37DatasetNoMultiLabelTarget(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#data').val('breastCancer.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    self.driver.execute_script("$('#sel option[value=\"Cell.shape\"]').prop('selected',true);")
    self.driver.execute_script("$('#sel option[value=\"Marg.adhesion\"]').prop('selected',true);")
    self.driver.execute_script("$('#sel option[value=\"Epith.c.size\"]').prop('selected',true);")
    self.driver.execute_script("$('#sel option[value=\"Bare.nuclei\"]').prop('selected',true);")
    self.driver.execute_script('$("#target").click()')
    alert = self.driver.switch_to.alert
    assert alert.text == "You can't select more than 1 target in no multilabel algorithms."
    alert.accept()
    self.logout()
  """
  def test_381DatasetMultiLabelTargetNormal(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#alg_typ').val(\"MultiClassification\")")
    self.driver.execute_script("$('#alg_typ').change();")
    self.driver.execute_script("$('#data').val('music.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    elm = list(range(6))
    for e in elm:
      self.driver.execute_script("$('#col"+str(e)+"_target_label').click();")
      elements = self.driver.find_elements(By.CSS_SELECTOR, "#col"+str(e)+"_use:checked")
      assert len(elements) == 0
      elements = self.driver.find_elements(By.CSS_SELECTOR, "#col"+str(e)+"_target:checked")
      assert len(elements) > 0
    self.driver.execute_script("$('#col76_use_label').click();")

    self.driver.find_element(By.ID, "reduced_tab-tab").click()

    element = self.driver.find_element(By.ID, "76_opt")
    assert "list-group-item-primary" in element.get_attribute("class").split(" ")

    for e in elm:
      element = self.driver.find_element(By.ID, str(e)+"_opt")
      assert "list-group-item-success" in element.get_attribute("class").split(" ")
    self.logout()
    
  def test_382DatasetMultiLabelTargetReduced(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()

    self.driver.execute_script("$('#alg_typ').val(\"MultiClassification\")")
    self.driver.execute_script("$('#alg_typ').change();")
    self.driver.execute_script("$('#data').val('music.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    self.driver.execute_script("$('#sel option[value=\"BHSUM3\"]').prop('selected', true);")
    self.driver.execute_script("$('#use').click();")

    assert "list-group-item-primary" in self.driver.find_element(By.ID, "76_opt").get_attribute("class").split(" ")

    elm = ['amazed-suprised', 'happy-pleased', 'relaxing-clam', 'quiet-still', 'sad-lonely', 'angry-aggresive']
    for e in elm:
      self.driver.execute_script("$('#sel option[value=\""+e+"\"]').prop('selected', true);")
    self.driver.execute_script("$('#target').click();")
    for e in range(6):
      assert "list-group-item-success" in self.driver.find_element(By.ID, str(e)+"_opt").get_attribute("class").split(" ")
    
    self.driver.find_element(By.ID, "normal_tab-tab").click()
    for e in range(6):
      elements = self.driver.find_elements(By.CSS_SELECTOR, "#col"+str(e)+"_use:checked")
      assert len(elements) == 0
      elements = self.driver.find_elements(By.CSS_SELECTOR, "#col"+str(e)+"_target:checked")
      assert len(elements) > 0
    self.logout()
    
  def test_39DatasetFromMultiLabelToMonoLabel(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()

    self.driver.execute_script("$('#alg_typ').val(\"MultiClassification\")")
    self.driver.execute_script("$('#alg_typ').change();")
    self.driver.execute_script("$('#data').val('music.csv');")
    self.driver.execute_script("$('#data').change();")
    time.sleep(self.wait)
    self.driver.find_element(By.ID, "reduced_tab-tab").click()
    self.driver.execute_script("$('#sel option[value=\"BHSUM3\"]').prop('selected', true);")
    self.driver.execute_script("$('#use').click();")

    elm = ['amazed-suprised', 'happy-pleased', 'relaxing-clam', 'quiet-still', 'sad-lonely', 'angry-aggresive']
    for e in elm:
      self.driver.execute_script("$('#sel option[value=\""+e+"\"]').prop('selected', true);")
    self.driver.execute_script("$('#target').click();")
    
    self.driver.execute_script("$('#alg_typ').val(\"Classification\")")
    self.driver.execute_script("$('#alg_typ').change();")

    time.sleep(self.wait)
    assert "list-group-item-success" in self.driver.find_element(By.ID, "76_opt").get_attribute("class").split(" ")
    for e in range(6):
      assert "list-group-item-primary" in self.driver.find_element(By.ID, str(e)+"_opt").get_attribute("class").split(" ")

    self.driver.find_element(By.ID, "normal_tab-tab").click()
    for e in range(6):
      elements = self.driver.find_elements(By.CSS_SELECTOR, "#col"+str(e)+"_use:checked")
      assert len(elements) > 0
      elements = self.driver.find_elements(By.CSS_SELECTOR, "#col"+str(e)+"_target:checked")
      assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col76_use:checked")
    assert len(elements) == 0
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#col76_target:checked")
    assert len(elements) > 0
    self.logout()
  
  def test_4TrainTextCrossvalidation(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "#train_test_div > .form-control-label").text == "Train/Test partition"
    self.driver.find_element(By.CSS_SELECTOR, ".ml-2 > span").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "#cross_validation_div > .form-control-label").text == "Number of folds"
    self.logout()

  def test_51Algorithm(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#alg_typ').val(\"Classification\");")
    self.driver.execute_script("$('#alg_typ').change();")
    time.sleep(self.wait)
    self.driver.execute_script("$('#alg_name').val(\"sklearn.ensemble.BaggingClassifier\");")
    self.driver.execute_script("$('#alg_name').change();")
    time.sleep(self.wait)
    assert self.driver.find_element(By.CSS_SELECTOR, "p.font-weight-bold").text == "Decision Tree"
    self.driver.find_element(By.CSS_SELECTOR, "#base_estimator_open > .material-icons").click()
    self.driver.execute_script("$('#base_estimator_value').val(\"sklearn.ensemble.BaggingClassifier\");")
    self.driver.execute_script("$('#base_estimator_value').change();")
    time.sleep(self.wait)
    assert self.driver.find_element(By.CSS_SELECTOR, "#base_estimator_title > .font-weight-bold").text == "Bagging"
    self.logout()
  
  def test_52Algorithm2(self):
    self.login()
    self.driver.find_element(By.LINK_TEXT, "New Experiment").click()
    self.driver.execute_script("$('#alg_typ').val(\"Classification\");")
    self.driver.execute_script("$('#alg_typ').change();")
    time.sleep(self.wait)
    self.driver.execute_script("$('#alg_name').val(\"sklearn.ensemble.BaggingClassifier\");")
    self.driver.execute_script("$('#alg_name').change();")
    time.sleep(self.wait)
    assert self.driver.find_element(By.CSS_SELECTOR, "p.font-weight-bold").text == "Decision Tree"
    self.driver.find_element(By.CSS_SELECTOR, "#base_estimator_open > .material-icons").click()
    self.driver.execute_script("$('#base_estimator_value').val(\"sklearn.ensemble.BaggingClassifier\");")
    self.driver.execute_script("$('#base_estimator_value').change();")
    time.sleep(self.wait)
    assert self.driver.find_element(By.CSS_SELECTOR, "#base_estimator_title > .font-weight-bold").text == "Bagging"
    for i in range(1,3):
      self.driver.find_element(By.CSS_SELECTOR, "#level"+str(i)+"_base_estimator_open > .material-icons").click()
      self.driver.find_element(By.ID, "level"+str(i)+"_base_estimator_value").click()
      self.driver.execute_script("$('#level"+str(i)+"_base_estimator_value').val(\"sklearn.ensemble.BaggingClassifier\");")
      self.driver.execute_script("$('#level"+str(i)+"_base_estimator_value').change();")
      time.sleep(self.wait)
      assert self.driver.find_element(By.CSS_SELECTOR, "#level"+str(i+1)+"_base_estimator_title > .font-weight-bold").text == "Decision Tree"
    self.driver.execute_script("$('#base_estimator_value').val(\"sklearn.neighbors.KNeighborsClassifier\");")
    self.driver.execute_script("$('#base_estimator_value').change();")
    time.sleep(self.wait)
    assert self.driver.find_element(By.CSS_SELECTOR, ".font-weight-bold").text == "KNN"
    elements = self.driver.find_elements(By.CSS_SELECTOR, "#level2_base_estimator_title")
    assert len(elements) == 0
    self.logout()
  